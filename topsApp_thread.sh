#!/bin/bash
#
# Bash script to do batch processing based on topsApp.py
# Created by J.Chen @NCL 2015
# Modified by J.Chen @NCL 2016-11-05
# Modified by J.Chen @NCL 2016-11-07
# Modified by J.Chen @NCL 2016-12-22
#
##################### readme #########################
#
# write processing details to screen.log in each folder
# capable to check baseline
# keep files:*.geo.*:dem*:file_topophase.*:isce.log:screen.log
# outputs: 1. one-band roi_pac format unwrapped phase files
#          2. baseline.inf (only selected pairs)
#          3. phslist.inf (phase file list)
#          4. error.datePair (excluded baseline error) 
#          5. topsApp_thread_YYYY_MM_DD_HH_MM.log
#
######################################################

##example: threadtest.sh datesPair
if [ ! -n "$1" ] || [ $# -gt 1 ]; then
  echo "Usage: topsApp_thread.sh <datesPairFile>"
  exit 1
fi
#=====================================================
# User should set the following parameters
#=====================================================
# set DEM filename
demFilename='demLat_N29_N33_Lon_E102_E105.dem.wgs84'
demFile1='/home/users/b4037735/hpc2/ISCE_process/S1_Daduhe/dem90/demLat_N29_N33_Lon_E102_E105.dem.wgs84'
demFile2='/home/users/b4037735/hpc2/ISCE_process/S1_Daduhe/dem15/demLat_N29_N33_Lon_E102_E105.dem.wgs84'
swbdFile='/home/users/b4037735/hpc2/ISCE_process/S1_Daduhe/dem90/swbdLat_N29_N33_Lon_E102_E105.wbd'
# set working directory
workdir='/home/users/b4037735/hpc2/ISCE_process/S1_Daduhe/process'
# set step blocks
step_block_1=true #start-->preprocess, baseline check
step_block_2=true #verifyDEM-->unwrap2stage
step_block_3=true #geocode, sort result
# set output folder for insar_TS_AEM
output=${workdir}/ISCE_OUTPUT
# set flat ROI_PAC format folder
flatout=${workdir}/ISCE_FLAT
# set filenames for insar_TS_AEM
baseline_file=${workdir}/baseline_t2.inf
phslist_file=${workdir}/phslist_t2.inf
# set datePair file for rerun
error_datePair=${workdir}/error_t2.datePair
# set baseline threshold
thres_baseline=500
#=====================================================
# Please don't change any codes below
#=====================================================
MY_SCR='/home/users/b4037735/hpc2/ISCE_process/ISCE_batch_20161012'
dates=$1 #datesPair file generated by isce_batch_prep
logfile=${workdir}/topsApp_thread_`date +%Y_%m_%d-%H_%M`.log

# prepare file and folder
if [ ! -d $output ]; then
  mkdir $output
fi
if [ ! -d $unwput ]; then
  mkdir $unwput
fi
if [ ! -d $flatout ]; then
  mkdir $flatout
fi
if [ -f $baseline_file ]; then
  rm -f $baseline_file
fi
if [ -f $phslist_file ]; then
  rm -f $phslist_file
fi
touch $phslist_file
touch $baseline_file
touch $logfile
touch $error_datePair

echo "topsApp_thread.sh            ${1}" >> $logfile
echo "working directory:           ${workdir}" >> $logfile
echo "result  directory:           ${output}" >> $logfile
echo "successful pair baseline:    ${baseline_file}" >> $logfile
echo "successful phase file list:  ${phslist_file}" >> $logfile
echo "error pairs list:            ${error_datePair}" >> $logfile
echo " " >> $logfile
echo "start at: `date +%Y_%m_%d-%H:%M:%S`" >> $logfile 

#read dates file to array
dateArray1=(`(awk '{print $1}' $dates)`)
dateArray2=($(awk '{print $2}' $dates))
tLen=${#dateArray1[@]} #folder number
echo $tLen " interferograms processing ......"
echo $tLen " interferograms processing ......" >> $logfile

for((i=0;i<tLen;i++));do
  fileArray[i]=${dateArray1[i]}_${dateArray2[i]};
done
#parallel threads
Njob=${tLen}  #total job number
thread=2      #parallel processing thread,<=10

# processing dir, same with $workdir
dir=`dirname $dates` 
cd $dir

##define the function to run topsApp.py
function topsAppStep {
  #n=$((RANDOM % 5 + 1))
  n=5 #sleeping seconds
  date_i=$1
# split datesPair tods be seperated dates
  date_split=${date_i/_/    }
  echo $date_i  ## let user know which folder is in processing
  # link DEM file to the work folder
  if [ ! -f ${demFilename} ] && [ -f ${demFile1} ]; then
    ln -s ${demFile1}* ./
  fi
  if [ -f ${swbdFile} ]; then
    ln -s ${swbdFile}* ./
  fi
#  echo "Job $1 exitsting..."
  if [ -f "isce.log" ]; then
    rm isce.log #becase isce.log would write after the existed file
  fi  
## calculate baseline by topsApp.py
  if [ "$step_block_1" = true ]; then
    if
      topsApp.py topsApp.xml --steps --end="computeBaselines" &> screen.log 
    then
      ##check baseline
      ##be careful about the IW-2!!!
      perp_baseline_first=`grep "baseline.IW-2 Bperp at midrange for first common burst" screen.log | awk '{print $10}'`
      perp_baseline_last=`grep "baseline.IW-2 Bperp at midrange for last common burst" screen.log | awk '{print $10}'`
      perp_baseline_average=`echo "$perp_baseline_first $perp_baseline_last"|awk '{printf("%g",($1+$2)/2)}'`
      perp_baseline_abs_int=`printf '%.0f\n' ${perp_baseline_average#-}`
      # baseline > threshold
      if [ $perp_baseline_abs_int -gt $thres_baseline ]; then
        echo "${date_i}: baseline is larger than $threshold" >> $logfile
        return 2 #baseline > threshold
               #stop this pair
      fi
    else
      echo "error at step 1"
      return 1 #topsApp.py
    fi
  fi
## from veryfiDEM to unwrap2stage
  if [ "$step_block_2" = true ]; then      
        ##continue rest steps, without screen show
      if
        ! topsApp.py topsApp.xml --steps --start="verifyDEM" --end="fineresamp" &>> screen.log; then
      echo ${date_split} >> ${error_datePair}
      echo "${date_i}: error at `grep -n "The remaining steps are (in order):" screen.log | tail -1 | cut -d "'" -f 2`"  >> $logfile
      return 1 #topsApp.py error
    fi
  fi
## geocode
  if [ "$step_block_3" = true ]; then
    if [ -f ${demFile2} ]; then
      rm ${demFilename}*
      ln -s ${demFile2}* ./
    fi
    if
      topsApp.py topsApp.xml --steps --dostep="geocode" >> screen.log
    then #topsApp.py succeed
      if [ ! -f "filt_topophase.unw.geo" ]; then
        echo "${date_i}: No unwrapped result" >> $logfile
        continue
        return 1 #topsApp.py error
      fi
###GLOBIGNORE
      GLOBIGNORE=merged*:PICKLE*:*.geo*:dem*:filt_topophase.*:isce.log:screen.log:topsApp.xml:fine_coreg #kept file
      rm -rfv * &>> screen.log #-v record removed files
      unset GLOBIGNORE
      #sort result to OUTPUT folder for INSAR_TS_AEM package
      if [ ! -d "merged" ]; then
        echo "${date_i}: No merged result" >> $logfile
        return 1 #topsApp.py error
        continue
      fi
      if
        ${MY_SCR}/isce2phs.py  merged/filt_topophase_2stage.unw.geo
        ${MY_SCR}/isce2phs_mask.py -u merged/filt_topophase.unw.geo -b C -c merged/phsig.cor.geo -t 0.4
        cp merged/filt_topophase_2stage.unw.geo.phs ${output}/geo_${date_i}.unw.phs
        cp merged/filt_topophase_2stage.unw.geo.phs.rsc ${output}/geo_${date_i}.unw.phs.rsc
        cp merged/filt_topophase.unw.geo.phs ${unwput}/geo_${date_i}.unw.phs
        cp merged/filt_topophase.unw.geo.phs.rsc ${unwput}/geo_${date_i}.unw.phs.rsc
        #get phase from merged/filt_topophase.flat.geo
        imageMath.py -e="arg(a)" --a=merged/filt_topophase.flat.geo -o merged/filt_topophase.flat.phs.geo -s BIL
        cp merged/filt_topophase.flat.phs.geo ${flatput}/geo_${date_i}.flat.phs
        cp merged/filt_topophase.unw.geo.phs.rsc ${flatput}/geo_${date_i}.flat.phs.rsc
        date_str=${date_i/_/-}
      then
        echo ${date_str} '    ' ${perp_baseline_average} >> $baseline_file
        echo "geo_${date_i}.unw.phs" >> $phslist_file
      fi
###
      echo "${date_i}: succeed" >> $logfile
      return 0
    else
      ##error in running the rest steps
      echo ${date_split} >> ${error_datePair}
      echo "${date_i}: error at `grep -n "The remaining steps are (in order):" screen.log | tail -1 | cut -d "'" -f 2`"  >> $logfile
      return 1 #topsApp.py error
    fi
  else
    echo ${date_split} >> ${error_datePair}
    echo "${date_i}: error at `grep -n "The remaining steps are (in order):" screen.log | tail -1 | cut -d "'" -f 2`"  >> $logfile
    return 1 #topsApp.py error before verifyDEM
  fi
#  echo "Job $1 sleeping for $n seconds ..."
  sleep $n
}

tmp_fifofile="/home/users/b4037735/$$.fifo"
mkfifo $tmp_fifofile      # create a fifo type file 新建一个fifo类型的文件
exec 6<>$tmp_fifofile      # point f6 to fifo type 将fd6指向fifo类型
rm $tmp_fifofile

for ((i=0;i<$thread;i++));do
  echo 
done >&6 # put a carriage return in fd6 事实上就是在fd6中放置了$thread个回车符
for ((i=0;i<${Njob};i++));do # Njob loop
  read -u6
  # remove one carriage return each time execute "read -u6", move to next one
  # stop here if no carriage return in fd6
  { # begin sub-thread, background running
    datefile=${fileArray[$i]}
    cd $datefile
    topsAppStep ${datefile}
    return_stat=$?
    cd ..
    if [ $return_stat -eq 0 ]
    then
      echo "Job $i : topsAppStep ${datefile} is finished"
    elif [ $return_stat -eq 1 ] # topsApp error
    then
      echo "Job $i : topsAppStep ${datefile} error"
      echo "         check ${datefile}/screen.log"
    elif [ $return_stat -eq 2 ] # baseline
    then
      rm -rf ${datefile} #remove the folder
      echo "Job $i : topsAppStep ${datefile} baseline > threshold"
    else
      echo "Unexpected error!! Job $i"
    fi
#####
    sleep 3 # pause 3", can be longer
                # key point! buffer time for system, limit thread number
  echo >&6 # this thread end, add one carriage return to fd6
  } &
done

wait # wait for all sub-thread
exec 6>&- # close fd6 

echo "********************************"
echo "finish at: `date +%Y_%m_%d-%H:%M:%S`" >> $logfile
echo $tLen " jobs have finished"
echo "result in: ${output}"
echo "logfile: ${logfile}"
echo "********************************"

exit 0
